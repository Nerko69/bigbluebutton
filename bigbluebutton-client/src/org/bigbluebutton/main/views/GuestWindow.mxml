<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	title="{ResourceUtil.getInstance().getString('bbb.guests.title')}" showCloseButton="false" creationComplete="init()"
	x="0" y="0" layout="vertical" width="320" horizontalAlign="center"
	xmlns:mate="http://mate.asfusion.com/" >

	<mate:Listener type="ACCEPT_ALL_WAITING_GUESTS" method="acceptAllWaitingGuests"/>
	<mate:Listener type="DENY_ALL_WAITING_GUESTS" method="denyAllWaitingGuests"/>
	<mate:Listener type="ResponseModeratorEvent.RESPONSE" method="onModeratorResponse" />

	<mx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.managers.PopUpManager;
			import com.asfusion.mate.events.Dispatcher;
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.managers.UserManager;
			import org.bigbluebutton.main.events.ResponseModeratorEvent;
			import org.bigbluebutton.main.events.ModuleLoadEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			import mx.containers.HBox;
			import mx.controls.Button;
			import mx.controls.Spacer;
			import org.bigbluebutton.main.events.BBBEvent;
			
			private var urlLoader:URLLoader;
			private var guestWindowMap:Object = new Object();
			private var guestButtons:Object = new Object();
			[Bindable] private var numberOfGuests:Number = 0;
			private var dispatcher:Dispatcher = new Dispatcher();

			public function init():void {
				//Uncomment this line to make titlewindow undraggable			
				//this.isPopUp = false;
			}

			public function addGuest(userid:Number, username:String):void {
//		for (var i:int = 0; i < 30; ++i) {
//		username += i;
				numberOfGuests++;
				guestWindowMap[userid] = username;

				var guestItem:GuestItem = new GuestItem();
				guestItem.setUser(username, userid);
				guestListBox.addChild(guestItem);
				guestButtons[userid] = guestItem;

				this.visible = true;
//		}
			}

			public function sendResponseToAllGuests(resp:Boolean):void {
				removeAllGuests();
				var respCommand:ResponseModeratorEvent = new ResponseModeratorEvent(ResponseModeratorEvent.RESPONSE_ALL);
				respCommand.resp = resp;
				dispatcher.dispatchEvent(respCommand);
			}
			
			public function sendResponseToAllGuestsCheckBox(resp:Boolean):void {
				if(checkBoxR.selected) {
					var event:BBBEvent = new BBBEvent("GUEST_POLICY");
					if(resp) {
						event.payload['guestPolicy'] = "ALWAYS_ACCEPT";
					}
					else {
						event.payload['guestPolicy'] = "ALWAYS_DENY";
					}
					dispatchEvent(event);
				}
				sendResponseToAllGuests(resp);
			}

			public function acceptAllWaitingGuests(event:BBBEvent):void {
				sendResponseToAllGuests(true);
			}
			
			public function denyAllWaitingGuests(event:BBBEvent):void {
				sendResponseToAllGuests(false);
			}
	
			public function removeAllGuests():void {
				numberOfGuests = 0;

				for (var key:String in guestWindowMap) {
				    var userid:Number = new Number(key);
				    guestListBox.removeChild(guestButtons[userid]);
				}
				guestWindowMap = new Object();
				guestButtons = new Object();
				this.visible = false;
			}
		
			public function remove(userid:Number):void {
				if (guestWindowMap[userid] != null) {
					numberOfGuests--;
				
					delete guestWindowMap[userid];
					guestListBox.removeChild(guestButtons[userid]);
					delete guestButtons[userid];
					if(this.hasGuest() == false) {
						this.visible = false;
					}
				}
			}

			public function hasGuest():Boolean {
				if(numberOfGuests > 0)
					return true;
				else
					return false;			
			}

			public function removeAll():void {
				PopUpManager.removePopUp(this);
			}
			
			private function onModeratorResponse(event:ResponseModeratorEvent):void {
				remove(event.userid);
			}

		]]>
	</mx:Script>
	<mx:Label text="{numberOfGuests > 1? ResourceUtil.getInstance().getString('bbb.guests.message.plural', [String(numberOfGuests)]): ResourceUtil.getInstance().getString('bbb.guests.message.singular', [String(numberOfGuests)])}"/>
	<mx:HRule width="100%"/>
	<mx:Button id="allowEveryoneBtn" label="{ResourceUtil.getInstance().getString('bbb.guests.allowEveryoneBtn.text')}" width="70%" click="sendResponseToAllGuestsCheckBox(true)" toolTip="{allowEveryoneBtn.label}"/>
	<mx:Button id="denyEveryoneBtn" label="{ResourceUtil.getInstance().getString('bbb.guests.denyEveryoneBtn.text')}" width="70%" click="sendResponseToAllGuestsCheckBox(false)" toolTip="{denyEveryoneBtn.label}"/>
	<mx:CheckBox id="checkBoxR" label="{ResourceUtil.getInstance().getString('bbb.guests.rememberAction.text')}"/>
	<mx:HRule width="100%"/>
	<mx:VBox id="guestListBox" width="100%" height="100%" maxHeight="200" paddingLeft="10" paddingRight="10" paddingBottom="2" />
	
</mx:TitleWindow> 
