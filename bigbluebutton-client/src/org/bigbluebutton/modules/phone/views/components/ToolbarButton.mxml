<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:Button xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:mate="http://mate.asfusion.com/"
	icon="{phoneIcon}" click="startPhone()"
	mouseOver = "mouseOverHandler(event)"
	mouseOut = "mouseOutHandler(event)"
	visible = "{amIPresenter || !phoneOptions.presenterShareOnly}"
	includeInLayout = "{amIPresenter || !phoneOptions.presenterShareOnly}"
	toolTip="{ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start')}"
	implements="org.bigbluebutton.common.IBbbToolbarComponent">

	<!-- TABELA VERDADE (TRADUZIR AQUI!)
	phoneOptions.presenterShareOnly		amIPresenter	amIPresenter || !phoneOptions.presenterShareOnly
	V 									V 				V
	V 									F 				F -> do not show de button only if only presenters can share microphone and I'm not a
	F 									V 				V
	F 									F 				V
	-->

	<mate:Listener type="SPEAKING_AND_LISTENING" method="handleBBBSpeakingAndListening"/>
	<mate:Listener type="LISTENING_ONLY" method="handleBBBListeningOnly"/>


	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.core.managers.UserManager
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.main.views.MainToolbar;
			import org.bigbluebutton.modules.phone.PhoneOptions;
			import org.bigbluebutton.modules.phone.events.CallConnectedEvent;
			import org.bigbluebutton.modules.phone.events.CallDisconnectedEvent;
			import org.bigbluebutton.modules.phone.views.assets.Images;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private var images:Images = new Images();
			private var dispatcher:Dispatcher = new Dispatcher();
			[Bindable]
			private var phoneOptions:PhoneOptions = new PhoneOptions();
			[Bindable]
			private var amIPresenter:Boolean = UserManager.getInstance().getConference().amIPresenter();
			
			public const DEFAULT_STATE:Number = 0;
			public const ACTIVE_STATE:Number = 1;
			private var _currentState:Number = DEFAULT_STATE;
			private var _changeState:Boolean = false;
			private var stopChangingIcon:Boolean = false;
		
			
			[Bindable] public var phoneIcon:Class = images.headsetDefaultIcon;
			
			private function startPhone():void {
				// Disable the button right away to prevent the user from clicking
				// multiple times.
				this.enabled = false;
				var vxml:XML = BBB.getConfigForModule("PhoneModule");
				var phoneOptions:PhoneOptions = new PhoneOptions();
				if (noMicrophone() == false) {
					var askToChangeEvent:BBBEvent;
					askToChangeEvent = new BBBEvent("ASK_TO_CHANGE_VOICE_CONFERENCE_EVENT");
					if(_currentState == DEFAULT_STATE) {
						if(phoneOptions.skipCheck) {
							askToChangeEvent.payload["global"] = false;
						}
						else {
							askToChangeEvent = new BBBEvent("SHOW_MIC_SETTINGS");
						}
					}
					else {
						askToChangeEvent.payload["global"] = true;
					}
					dispatcher.dispatchEvent(askToChangeEvent);
				}
				if(stopChangingIcon) {
					disableButton();
				}
			}
			
			private function mouseOverHandler(event:MouseEvent):void {
				if(stopChangingIcon) {
					disableButton();
				}
				else {
					if(stopChangingIcon == false) {
						if(_currentState == ACTIVE_STATE)
							phoneIcon = images.headsetInactiveIcon;
						else
							phoneIcon = images.headsetActiveIcon;	
					}
					else {
						phoneIcon = images.headsetDefaultIcon;
					}		
				}
			}

			private function mouseOutHandler(event:MouseEvent):void {
				if(stopChangingIcon) {
					disableButton();
				}
				else {
					if(_currentState == ACTIVE_STATE)
						phoneIcon = images.headsetActiveIcon;
					else
						phoneIcon = images.headsetDefaultIcon;	
				}		
			}

			public function disableButton():void {
				this.selected = false;
				this.enabled = false;
				stopChangingIcon = true;
				phoneIcon = images.headsetDefaultIcon;
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.nomic');
			}

			public function userJoinedConference(joined: Boolean):void {
				if (joined) {
					if(stopChangingIcon) {
						disableButton();
					}
					else {
						this.selected = true;
						this.enabled = true;
						_currentState = ACTIVE_STATE;
						phoneIcon = images.headsetActiveIcon;
						this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.stop');
					}

				} else {
					if(stopChangingIcon) {
						disableButton();
					}
					else {
						this.selected = false;
						this.enabled = true;
						_currentState = DEFAULT_STATE;
						phoneIcon = images.headsetDefaultIcon;
						this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
					}
				}
			}
			
			public function noMicrophone():Boolean {
				return ((Microphone.getMicrophone() == null) || (Microphone.names.length == 0) 
					|| ((Microphone.names.length == 1) && (Microphone.names[0] == "Unknown Microphone")));
			}
						
			private function handleCallDisconnectedEvent(event:CallDisconnectedEvent):void {
				this.selected = false;
				this.enabled = true;
				_currentState = DEFAULT_STATE;
				phoneIcon = images.headsetDefaultIcon;
				this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
				if(stopChangingIcon) {
					disableButton();
				}
					
			}
			
			
			private function handleBBBListeningOnly(event:BBBEvent):void {
				userJoinedConference(false);
			}
			private function handleBBBSpeakingAndListening(event:BBBEvent):void {
				userJoinedConference(true);
			}
			
			private function handleBBBJoinConferenceEvent(event:BBBEvent):void {
				//var joinEvent:BBBEvent = new BBBEvent("JOIN_VOICE_CONFERENCE_EVENT");
				//joinEvent.payload['useMicrophone'] = false;
				//dispatcher.dispatchEvent(joinEvent);
			}
			
			//For whatever reason the tooltip does not update when localization is changed dynamically. Overrideing it here
			override protected function resourcesChanged():void{
				if(_currentState == ACTIVE_STATE) {
					phoneIcon = images.headsetActiveIcon;
					this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.stop');
				} 
				else {
					phoneIcon = images.headsetDefaultIcon;
					this.toolTip = ResourceUtil.getInstance().getString('bbb.toolbar.phone.toolTip.start');
				}
				if(stopChangingIcon) {
					disableButton();
				}
			}
			
			public function getAlignment():String{
				return MainToolbar.ALIGN_LEFT;
			}

			public function setPresenter(value:Boolean):void {
				amIPresenter = value;
			}
		]]>
	</mx:Script>
</mx:Button>
