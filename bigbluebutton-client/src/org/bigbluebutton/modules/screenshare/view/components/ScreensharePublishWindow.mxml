<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Canvas
  xmlns:mx="http://www.adobe.com/2006/mxml" 
  xmlns:mate="http://mate.asfusion.com/"
  xmlns:common="org.bigbluebutton.common.*"
  xmlns:views="org.bigbluebutton.modules.screenshare.view.components.*"
  creationComplete="onCreationComplete()"	
  xmlns:dspub="org.bigbluebutton.common.*"
  verticalScrollPolicy="off" horizontalScrollPolicy="off"
  width="100%" height="100%">
  
  <mate:Listener type="{ShareStoppedEvent.SHARE_STOPPED}" method="handleScreenShareShareStoppedEvent" />
  <mate:Listener type="{ViewStreamEvent.START}" method="handleStartViewStreamEvent" />
  <mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="onChangedPresenter" />
  <mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="onChangedPresenter" />	
  <mate:Listener type="{ViewStreamEvent.STOP}" method="closePublishWindow" />
  <mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged" />
  <mate:Listener type="{StopSharingButtonEvent.STOP_SHARING}" method="stopSharingEvent" />
  <mate:Listener type="{BBBEvent.RECONNECT_DISCONNECTED_EVENT}" method="handleDisconnectedEvent" />
    
  <mx:Script>
    <![CDATA[
      import com.asfusion.mate.events.Dispatcher;
      
      import org.as3commons.logging.api.ILogger;
      import org.as3commons.logging.api.getClassLogger;
      import org.bigbluebutton.common.events.LocaleChangeEvent;
      import org.bigbluebutton.core.UsersUtil;
      import org.bigbluebutton.core.managers.ReconnectionManager;
      import org.bigbluebutton.main.events.BBBEvent;
      import org.bigbluebutton.main.events.MadePresenterEvent;
      import org.bigbluebutton.main.events.ShortcutEvent;
      import org.bigbluebutton.main.views.MainCanvas;
      import org.bigbluebutton.modules.screenshare.events.RequestToPauseSharing;
      import org.bigbluebutton.modules.screenshare.events.RequestToRestartSharing;
      import org.bigbluebutton.modules.screenshare.events.RequestToStopSharing;
      import org.bigbluebutton.modules.screenshare.events.ScreenSharePausedEvent;
      import org.bigbluebutton.modules.screenshare.events.ShareEvent;
      import org.bigbluebutton.modules.screenshare.events.ShareStartEvent;
      import org.bigbluebutton.modules.screenshare.events.ShareStoppedEvent;
      import org.bigbluebutton.modules.screenshare.events.ShareWindowEvent;
      import org.bigbluebutton.modules.screenshare.events.StopSharingButtonEvent;
      import org.bigbluebutton.modules.screenshare.events.ViewStreamEvent;
      import org.bigbluebutton.modules.screenshare.model.ScreenshareModel;
      import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
      import org.bigbluebutton.modules.screenshare.services.red5.Connection;
      import org.bigbluebutton.modules.screenshare.utils.BrowserCheck;
      import org.bigbluebutton.util.i18n.ResourceUtil;
      
      private static const LOGGER:ILogger = getClassLogger(ScreensharePublishWindow);
      
      public static const SCALE:Number = 5;
      private static const VID_HEIGHT_PAD:Number = 73;
      private static const VID_WIDTH_PAD:Number = 6;
      
      private var connection:Connection;
      private var uri:String;
      private var room:String;
      private var tunnel:Boolean = false;
      private var sharingFullScreen:Boolean = false;
      private var streaming:Boolean = false;
      
      private var video:Video;
      private var ns:NetStream;
      private var stream:String;
      private var videoHeight:Number;
      private var videoWidth:Number;
      private var captureHeight:Number = Capabilities.screenResolutionY;
      private var captureWidth:Number = Capabilities.screenResolutionX;
      private var globalDispatcher:Dispatcher = new Dispatcher();
      
      [Bindable] private var baseIndex:int;
      [Bindable] private var options:ScreenshareOptions = new ScreenshareOptions();
      
      private var paused:Boolean = false;
      
      private var os:String;
      private var browser:String;
      
      [Bindable]
      private var shareTypeProvider:Array;
      
      private function init():void {
        baseIndex = options.baseTabIndex;
      }
      
      private function onCreationComplete():void {
        options.parseOptions();

        var fullOS:String = Capabilities.os;
        if (fullOS.indexOf("Windows") != -1) {
          os = "Windows";
        } else if (fullOS.indexOf("Mac") != -1) {
          os = "Mac";
        } else if (fullOS.indexOf("Linux") != -1) {
          os = "Linux";
        } else {
          LOGGER.error("Browser not recognized, full value: {0}", [fullOS]);
          os = "";
        }
        
        browser = ExternalInterface.call("determineBrowser")[0];

        resourcesChanged();

        if (tunnel) {
          helpInfoBox.visible = helpInfoBox.includeInLayout = false;
          tunnelBox.visible = tunnelBox.includeInLayout = true;

          shareTypeBox.visible = false;
          cancelBtn.visible = cancelBtn.includeInLayout = true;
          startBtn.visible = startBtn.includeInLayout = false;
        }

        selectScreenshare();
      }

      private function selectScreenshare():void {
        if (ScreenshareModel.getInstance().usingWebRTCDeskshare) {
          useWebRTCScreenshare();
        } else if (options.enableJava) {
          useJavaWebStart();
        } else {
          disableScreenshare();
        }
      }
      
      public function get defaultWidth():int{
        return this.width;
      }
      
      public function get defaultHeight():int{
        return this.height;
      }
      
      public function set defaultHeight(height:int):void{
        this.height = height;
      }
      
      public function set defaultWidth(width:int):void{
        this.width = width;
      }
      
      public function getPrefferedPosition():String{
        return MainCanvas.DESKTOP_SHARING_PUBLISH;
      }
      
      public function handleDisconnectedEvent(event:BBBEvent):void {
          if (event.payload.type == ReconnectionManager.DESKSHARE_CONNECTION) {
            closeWindow();  
          }
      }

      public function initWindow(connection:Connection, uri:String, room:String, tunnel:Boolean):void {
        this.connection = connection;
        this.uri = uri;
        this.room = room;
		this.tunnel = tunnel;
      }

      private function handleScreenShareShareStoppedEvent(event:ShareStoppedEvent):void {
        LOGGER.debug("handleScreenShareShareStoppedEvent reason="+event.reason);
        
        var showReason:Boolean = false;
        
        if (event.reason == "JWS_START_FAILED_REASON") {
          showReason = true;
          if (paused) {
            restartFailedLbl.visible = restartFailedLbl.includeInLayout = true;
          } else {
            startFailedLbl.visible = startFailedLbl.includeInLayout = true;
          }
        } else if (event.reason == "JWS_GONE_REASON") {
          showReason = true;
          jwsCrashedLbl.visible = jwsCrashedLbl.includeInLayout = true;
        }
        
        if (showReason) {
          helpInfoBox.visible = helpInfoBox.includeInLayout = false;
          errorBox.visible = errorBox.includeInLayout = true;
          
          shareTypeBox.visible = false;
          cancelBtn.visible = cancelBtn.includeInLayout = true;
          startBtn.visible = startBtn.includeInLayout = false;
        } else {
          closeWindow();
        }
      }

      public function shareScreen(fullScreen:Boolean):void {
        LOGGER.debug("Calling shareScreen");
        startBtn.enabled = false;
        var shareStartEvent:ShareStartEvent = new ShareStartEvent();
        dispatchEvent(shareStartEvent);
        startSharing(connection.getConnection(), uri, room, fullScreen);
      }
      
      private function startSharing(connection:NetConnection, uri:String, room:String, fullScreen:Boolean):void {
        var captureX:Number = 0;
        var captureY:Number = 0;
        sharingFullScreen = fullScreen;
        var authToken:String = ScreenshareModel.getInstance().authToken;
        var jnlp: String = ScreenshareModel.getInstance().jnlp;
        LOGGER.debug("StartScreensharing jnlp=" + jnlp + " token=" + authToken);
        ExternalInterface.call("startScreensharing", jnlp, UsersUtil.getInternalMeetingID(), authToken, fullScreen);
      }
      
      public function stopSharing():void {
        LOGGER.debug("Calling stopSharing");
        if (streaming) {
          stopStream();
        }
        
        var streamEvent:RequestToStopSharing = new RequestToStopSharing();
        dispatchEvent(streamEvent);
        
        sharingFullScreen = false;
        streaming = false;
        
      }

      public function stopSharingEvent(evt:StopSharingButtonEvent):void{
        if (streaming) {
          stopStream();
        }
        sharingFullScreen = false;
        streaming = false;
        
        closeWindow();
      }
           
      private function handleStartViewStreamEvent(event:ViewStreamEvent):void{
        LOGGER.debug("handleStartViewStreamEvent");
        var width: int = ScreenshareModel.getInstance().width;
        var height: int = ScreenshareModel.getInstance().height;
        var streamId: String = ScreenshareModel.getInstance().streamId;
      }

      public function onMetaData(info:Object):void{
        LOGGER.debug("metadata: width=" + info.width + " height=" + info.height);
      }
      
      private function stopStream():void{
        streaming = false;
        captureHeight = Capabilities.screenResolutionY;
        captureWidth = Capabilities.screenResolutionX;
        ns.close();
      }
      
      private function onAsyncError(e:AsyncErrorEvent):void{
        LOGGER.debug("VIdeoWindow::asyncerror " + e.toString());
      }
      
      private function onNetStatus(e:NetStatusEvent):void{
        switch(e.info.code){
          case "NetStream.Publish.Start":
            LOGGER.debug("NetStream.Publish.Start for broadcast stream " + stream);
            break;
          case "NetStream.Play.UnpublishNotify":
            LOGGER.debug("NetStream.Play.UnpublishNotify for broadcast stream " + stream);
            stopSharing();
            break;
          case "NetStream.Play.Start":
            LOGGER.debug("Netstatus: " + e.info.code);
            globalDispatcher.dispatchEvent(new BBBEvent(BBBEvent.DESKSHARE_STARTED));
        }
      }
      
      private function onChangedPresenter(e:Event):void{
        stopSharing();
        closeWindow();
      }
      
      private function closeWindow():void {
        dispatchEvent(new ShareWindowEvent(ShareWindowEvent.CLOSE));
      }
      
      private function restartJava():void {
        shareScreen(sharingFullScreen);
      }
      
      override protected function resourcesChanged():void{
        super.resourcesChanged();

        shareTypeProvider = [ResourceUtil.getInstance().getString('bbb.screensharePublish.shareType.fullScreen'),
                             ResourceUtil.getInstance().getString('bbb.screensharePublish.shareType.region')];
        
        setHelpText();
      }
      
      private function localeChanged(e:Event):void{
        resourcesChanged();
        setCurrentState(currentState);
      }
      
      private function closePublishWindow(event:ViewStreamEvent):void{
        stopStream();
        closeWindow();
      }
      
      private function isUsingMac():Boolean {
        return (Capabilities.os.indexOf("Mac") >= 0);
      }
      
      private function onHelpButtonClicked():void {
        var option:ScreenshareOptions = new ScreenshareOptions();
        option.parseOptions();
        var DEFAULT_HELP_URL:String = option.helpUrl;
        LOGGER.debug("onHelpButtonClicked - " + DEFAULT_HELP_URL);
        navigateToURL(new URLRequest(DEFAULT_HELP_URL), "_blank")
      }
      
      private function setHelpText():void {
        if (helpBox != null) {
          var info:String = "";
          if (os == "Windows") {
            shareTypeBox.visible = true;
            info = "PC";
            if (browser == "Microsoft Internet Explorer" || browser == "Edge") {
              info += "IE";
            } else if (browser == "Firefox") {
              info += "Firefox";
            } else { // default to Chrome for Windows
              info += "Chrome";
            }
          } else if (os == "Mac") {
            info = "Mac";
            // Macs need an extra image so extend the width by 200 and show the image
            this.width = 900;
            helpBox4.visible = helpBox4.includeInLayout = true;
            if (browser == "Safari") {
              info += "Safari";
            } else if (browser == "Firefox") {
              info += "Firefox";
            } else { // default to Chrome for Windows
              info += "Chrome";
            }
          } else if (os == "Linux") {
            shareTypeBox.visible = true;
            info = "Linux";
            if (browser == "Firefox") {
              info += "Firefox";
            } else { // default to Chrome for Linux
              info += "Chrome";
            }
          }
          
          if (info != "") {
            helpImg1.styleName = "publishHelp" + info + "1";
            helpLbl1.text = ResourceUtil.getInstance().getString("bbb.screensharePublish.helpText."+info+"1");
            
            helpImg2.styleName = "publishHelp" + info + "2";
            helpLbl2.text = ResourceUtil.getInstance().getString("bbb.screensharePublish.helpText."+info+"2");
            
            helpImg3.styleName = "publishHelp" + info + "3";
            helpLbl3.text = ResourceUtil.getInstance().getString("bbb.screensharePublish.helpText."+info+"3");
            
            helpImg4.styleName = "publishHelp" + info + "4";
            helpLbl4.text = ResourceUtil.getInstance().getString("bbb.screensharePublish.helpText."+info+"4");
          }
        }
      }
      
      private function onStartButtonClick():void {
        cancelBtn.visible = cancelBtn.includeInLayout = true;
        shareScreen(shareTypeCombo.selectedIndex == 0);
      }
      
      private function switchView(showHelp:Boolean):void {
        helpInfoBox.visible = helpInfoBox.includeInLayout = showHelp;
        
        shareTypeBox.visible = showHelp;
        cancelBtn.visible = cancelBtn.includeInLayout = showHelp;
        startBtn.visible = startBtn.includeInLayout = showHelp;
      }

      private function onCancelButtonClick():void {
        dispatchEvent(new ShareEvent(ShareEvent.REFRESH_SCREENSHARE_PUBLISH_TAB));
      }

      private function onWebRTCDeskshareSuccess():void {
        LOGGER.debug("onWebRTCDeskshareSuccess, do nothing");
      }

      private function onWebRTCDeskshareFail():void {
        selectScreenshare();
      }

      override public function setCurrentState(stateName:String, playTransition:Boolean = true):void {
        LOGGER.debug("Setting current state to " + stateName);
        super.setCurrentState(stateName, playTransition);
        switch(stateName) {
          case "javaWebStartState":
            resourcesChanged();
            break;
          case "webRTCScreenshareState":
            //webRTCDeskshareWindow.connect();
            break;
        }
      }

      private function useWebRTCScreenshare():void {
        setCurrentState("webRTCScreenshareState");
      }

      private function disableScreenshare():void {
        setCurrentState("disabledScreenshareState");
      }

      private function useJavaWebStart():void {
        setCurrentState("javaWebStartState");
      }

      private function onLinkClicked(e:TextEvent):void{
        LOGGER.debug("Clicked on link[{0}]", [e.text]);
        if (ExternalInterface.available) {
          ExternalInterface.call("chatLinkClicked", e.text);
        }
      }
    ]]>
  </mx:Script>

  <common:TabIndexer id="tabIndexer"
      startIndex="{options.baseTabIndex + 1}"
      tabIndices="{[helpButton, shareTypeCombo, startBtn, cancelBtn]}"/>

  <mx:states>
    <mx:State name="javaWebStartState">
      <mx:AddChild>
        <mx:VBox height="100%" width="100%">
          <mx:ControlBar horizontalAlign="right">
            <mx:Spacer width="100%"/>
              <mx:HBox id="shareTypeBox" visible="false" verticalAlign="middle">
                <mx:Label styleName="desktopShareTextStyle"
                    text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.shareTypeLabel.text')}"/>
                <mx:ComboBox id="shareTypeCombo" dataProvider="{shareTypeProvider}"/>
              </mx:HBox>
            <mx:Spacer width="80%"/>
            <mx:Button id="startBtn"
                click="onStartButtonClick()"
                label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.startButton.label')}"/>
            <mx:Button id="cancelBtn"
                click="onCancelButtonClick()"
                visible="false"
                includeInLayout="false"
                label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.cancelButton.label')}"/>
          </mx:ControlBar>
          <mx:Box id="publishView"
              height="100%"
              width="100%"
              styleName="desktopShareViewStyle">
            <mx:VBox id="helpInfoBox"
                width="100%"
                height="100%"
                verticalAlign="middle"
                verticalGap="12">
              <mx:HBox width="100%">
                <mx:Text styleName="desktopShareTextStyle"
                    width="100%"
                    text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.commonHelpText.text')}"/>
                <mx:LinkButton id="helpButton"
                    height="22"
                    label="?"
                    styleName="micSettingsWindowHelpButtonStyle"
                    right="0"
                    click="onHelpButtonClicked()"
                    toolTip="{ResourceUtil.getInstance().getString('bbb.screensharePublish.helpButton.toolTip')}"
                    accessibilityName="{ResourceUtil.getInstance().getString('bbb.screensharePublish.helpButton.accessibilityName')}"/>
              </mx:HBox>
              <mx:VBox id="helpBox" width="100%" verticalAlign="middle">
                <mx:VBox width="30%" horizontalAlign="center">
                  <mx:Image id="helpImg1" source="{helpImg1.getStyle('imageSource')}" />
                  <mx:Text id="helpLbl1" width="100%" styleName="desktopShareTextStyle" />
                </mx:VBox>
                <mx:VBox width="30%" horizontalAlign="center">
                  <mx:Image id="helpImg2" source="{helpImg2.getStyle('imageSource')}" />
                  <mx:Text id="helpLbl2" width="100%" styleName="desktopShareTextStyle" />
                </mx:VBox>
                <mx:VBox width="30%" horizontalAlign="center">
                  <mx:Image id="helpImg3" source="{helpImg3.getStyle('imageSource')}" />
                  <mx:Text id="helpLbl3" width="100%" styleName="desktopShareTextStyle" />
                </mx:VBox>
                <mx:VBox id="helpBox4" width="30%" horizontalAlign="center" visible="false" includeInLayout="false">
                  <mx:Image id="helpImg4" source="{helpImg4.getStyle('imageSource')}" />
                  <mx:Text id="helpLbl4" width="100%" styleName="desktopShareTextStyle" />
                </mx:VBox>
              </mx:VBox>
            </mx:VBox>
            <mx:VBox id="errorBox"
                width="100%"
                height="100%"
                visible="false"
                includeInLayout="false"
                horizontalAlign="center"
                verticalAlign="middle">
              <mx:Text id="startFailedLbl"
                  width="70%"
                  visible="false"
                  includeInLayout="false"
                  textAlign="center"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.startFailed.label')}"/>
              <mx:Text id="restartFailedLbl"
                  width="70%"
                  textAlign="center"
                  visible="false"
                  includeInLayout="false"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.restartFailed.label')}"/>
              <mx:Text id="jwsCrashedLbl"
                  width="70%"
                  textAlign="center"
                  visible="false"
                  includeInLayout="false"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.jwsCrashed.label')}"/>
              <mx:Text width="70%"
                  textAlign="center"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.commonErrorMessage.label')}"/>
            </mx:VBox>
            <mx:VBox id="tunnelBox"
                width="100%"
                height="100%"
                visible="false"
                includeInLayout="false"
                horizontalAlign="center"
                verticalAlign="middle">
              <mx:Text width="80%"
                  textAlign="center"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.tunnelingErrorMessage.one')}"/>
              <mx:Text width="80%"
                  textAlign="center"
                  styleName="desktopShareTextStyle"
                  text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.tunnelingErrorMessage.two')}"/>
            </mx:VBox>
          </mx:Box>
        </mx:VBox>
      </mx:AddChild>
    </mx:State>

    <mx:State name="disabledScreenshareState">
      <mx:AddChild>
        <mx:VBox width="100%" height="100%" horizontalAlign="center">
          <mx:HBox width="100%" horizontalAlign="center">
            <mx:Text id="disabledScreenshareTxt"
                height="100%"
                width="100%"
                textAlign="center"
                styleName="desktopShareTextStyle"
                text="There is not screenshare available"/>
          </mx:HBox>
        </mx:VBox>
      </mx:AddChild>
    </mx:State>

    <mx:State name="webRTCScreenshareState">
      <mx:AddChild>
        <views:WebRTCDeskshareWindow id="webRTCDeskshareWindow"
            height="100%"
            width="100%"
            success="onWebRTCDeskshareSuccess"
            fail="onWebRTCDeskshareFail"/>
      </mx:AddChild>
    </mx:State>
  </mx:states>

</mx:Canvas>
