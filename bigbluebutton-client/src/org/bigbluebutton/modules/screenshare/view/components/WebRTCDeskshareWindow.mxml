<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2015 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:Box
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:mate="http://mate.asfusion.com/"
	backgroundColor="#C0C0C0"
	creationComplete="onCreationComplete()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	width="100%" height="100%">

	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_PRESENTER_MODE}" method="onChangedPresenter"/>
	<mate:Listener type="{MadePresenterEvent.SWITCH_TO_VIEWER_MODE}" method="onChangedPresenter"/>
	<mate:Listener type="{LocaleChangeEvent.LOCALE_CHANGED}" method="localeChanged"/>
	<mate:Listener type="{WebRTCPublishWindowChangeState.DISPLAY_INSTALL}" method="displayInstall"/>
	<mate:Listener type="{WebRTCPublishWindowChangeState.DISPLAY_RETRY}" method="displayRetry"/>
	<mate:Listener type="{WebRTCPublishWindowChangeState.DISPLAY_FALLBACK}" method="displayFallback"/>

	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			import flash.external.ExternalInterface;
			import mx.core.UIComponent;

			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;

			import org.bigbluebutton.common.events.LocaleChangeEvent;
			import org.bigbluebutton.main.events.MadePresenterEvent;
			import org.bigbluebutton.modules.screenshare.events.UseJavaModeCommand;
			import org.bigbluebutton.modules.screenshare.events.WebRTCShareWindowEvent;
			import org.bigbluebutton.modules.screenshare.events.StopSharingButtonEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCViewStreamEvent;
			import org.bigbluebutton.modules.screenshare.events.WebRTCPublishWindowChangeState;
			import org.bigbluebutton.modules.screenshare.model.ScreenshareOptions;
			import org.bigbluebutton.modules.screenshare.events.RequestToStartSharing;
			import org.bigbluebutton.modules.screenshare.events.DeskshareToolbarEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;

			private static const LOGGER:ILogger = getClassLogger(WebRTCDeskshareWindow);

			private var connection:NetConnection;
			private var uri:String;
			private var useTLS:Boolean;
			private var room:String;
			private var streaming:Boolean = false;
			private var globalDispatcher:Dispatcher = new Dispatcher();
			private var _screenshareOptions:ScreenshareOptions = null;

			public function get screenshareOptions():ScreenshareOptions {
				if (this._screenshareOptions == null) {
					this._screenshareOptions = new ScreenshareOptions();
					this._screenshareOptions.parseOptions();
				}
				return this._screenshareOptions;
			}

			private function displayInstall(e:Event):void {
				setCurrentState("displayInstall");
			}

			private function displayRetry(e:Event):void {
				setCurrentState("displayRetry");
			}

			private function displayFallback(e:Event):void {
				setCurrentState("displayFallback");
				if (ExternalInterface.available) {
					var isIncognito:Function = function(args:Object):void {
						incognitoLbl.visible = true;
					};

					var isNotIncognito:Function = function(args:Object):void {};

					ExternalInterface.addCallback("isIncognito", isIncognito);
					ExternalInterface.addCallback("isNotIncognito", isNotIncognito);
					ExternalInterface.call("checkIfIncognito", "isIncognito", "isNotIncognito");
				}
			}

			private function onInstallButtonClicked():void {
				navigateToURL(new URLRequest(screenshareOptions.chromeExtensionLink), "_blank");
				globalDispatcher.dispatchEvent(new WebRTCPublishWindowChangeState(WebRTCPublishWindowChangeState.DISPLAY_RETRY));
			}

			private function onRetryButtonClicked():void {
				var onSuccess:Function = function(exists:Boolean):void {
					ExternalInterface.addCallback("onSuccess", null);
					if (exists) {
						globalDispatcher.dispatchEvent(new RequestToStartSharing());
					} else {
						globalDispatcher.dispatchEvent(new WebRTCPublishWindowChangeState(WebRTCPublishWindowChangeState.DISPLAY_FALLBACK));
					}
				};
				ExternalInterface.addCallback("onSuccess", onSuccess);
				ExternalInterface.call("checkChromeExtInstalled", "onSuccess", screenshareOptions.chromeExtensionKey);
			}

			private function onFallbackButtonClicked():void {
				closeWindow();
				globalDispatcher.dispatchEvent(new UseJavaModeCommand());
			}

			private function onCreationComplete():void {
				setCurrentState("dispFullRegionControlBar"); //TODO ANTON
				resourcesChanged();
			}

			public function get defaultWidth():int{
				return this.width;
			}

			public function get defaultHeight():int{
				return this.height;
			}

			public function set defaultHeight(height:int):void{
				this.height = height;
			}

			public function set defaultWidth(width:int):void{
				this.width = width;
			}

			/*
			 * Implement resizeable interface.
			 */
			public function resetWidthAndHeight():void{/* do nothing */}

			public function initWindow(connection:NetConnection, uri:String, useTLS:Boolean , room:String):void {
				this.connection = connection;
				this.uri = uri;
				this.useTLS = useTLS;
				this.room = room;
			}

			public function shareScreen(fullScreen:Boolean):void {
				LOGGER.debug("Calling shareScreen");
				startSharing(connection, uri, useTLS , room, fullScreen);
			}

			private function startSharing(connection:NetConnection, uri:String , useTLS:Boolean , room:String, fullScreen:Boolean):void {
				var captureX:Number = 0;
				var captureY:Number = 0;
				
			}

			public function stopSharing():void{
				if (streaming) {
					var streamEvent:WebRTCStreamEvent = new WebRTCStreamEvent(WebRTCStreamEvent.STOP);
					dispatchEvent(streamEvent);
				}
				streaming = false;
				closeWindow();
			}

			public function stopSharingEvent(evt:StopSharingButtonEvent):void{
				LOGGER.debug("stopSharingEvent");
				stopSharing();
			}

			private function securityErrorHandler(event:SecurityErrorEvent):void {
				LOGGER.debug("securityErrorHandler");
			}

			private function onAsyncError(e:AsyncErrorEvent):void{
				LOGGER.debug("onAsyncError {0}", [e.toString()]);
			}

			private function onChangedPresenter(e:Event):void{
				stopSharing();
				closeWindow();
			}

			private function closeWindow():void {
				// LOGGER.debug("Calling stopApplet in closeWindow()");
				dispatchEvent(new WebRTCShareWindowEvent(WebRTCShareWindowEvent.CLOSE));
			}

			private function localeChanged(e:Event):void{
				resourcesChanged();
			}

			private function closePublishWindow(event:WebRTCViewStreamEvent):void{
				closeWindow();
			}
		]]>
	</mx:Script>

	<mx:states>
		<mx:State name="dispFullRegionControlBar">
			<mx:AddChild relativeTo="mainElement" position="after">
				<mx:HBox width="100%" horizontalAlign="center">
					<mx:Button id="btnClosePublish"
							toolTip="{ResourceUtil.getInstance().getString('bbb.screensharePublish.stopButton.toolTip')}"
							label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.stopButton.label')}"
							visible="true"
							enabled="false"
							click="stopSharing()"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>

		<mx:State name="displayInstall">
			<mx:AddChild relativeTo="mainElement" position="after">
				<mx:VBox width="100%" height="100%" horizontalAlign="center">
					<mx:HBox width="100%" horizontalAlign="center">
						<mx:Text id="displayInstallTxt"
								width="100%"
								textAlign="center"
								styleName=""
								text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCChromeExtensionMissing.label')}"/>
					</mx:HBox>
					<mx:HBox width="100%" horizontalAlign="center">
						<mx:LinkButton id="btnInstallExtension"
								label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionInstallButton.label')}"
								visible="true"
								enabled="true"
								styleName="quickWindowLinkStyle"
								click="onInstallButtonClicked()"/>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>

		<mx:State name="displayRetry">
			<mx:AddChild relativeTo="mainElement" position="after">
				<mx:VBox width="100%" height="100%" horizontalAlign="center">
					<mx:LinkButton id="btnInstallExtension2"
							label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionInstallButton.label')}"
							visible="true"
							enabled="true"
							styleName="quickWindowLinkStyle"
							click="onInstallButtonClicked()"/>
					<mx:Label id="displayRetryLabel"
							width="70%"
							textAlign="center"
							styleName=""
							text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCRetryExtensionInstallation.label')}"/>
					<mx:Button id="btnRetry"
							label="Retry"
							visible="true"
							enabled="true"
							click="onRetryButtonClicked()"/>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>

		<mx:State name="displayFallback">
			<mx:AddChild relativeTo="mainElement" position="after">
				<mx:VBox width="100%" height="100%" horizontalAlign="center">
					<mx:HBox width="100%" height="100%" horizontalAlign="center">
						<mx:Text id="displayFallbackTxt"
								width="100%"
								textAlign="center"
								styleName=""
								text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCExtensionFailFallback.label')}"/>
					</mx:HBox>
					<mx:HBox width="100%" height="100%" horizontalAlign="center">
						<mx:Text id="incognitoLbl"
								width="100%"
								visible="false"
								text="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCPrivateBrowsingWarning.label')}"/>
					</mx:HBox>
					<mx:HBox width="100%" height="100%" horizontalAlign="center">
						<mx:Button id="btnFallback"
								label="{ResourceUtil.getInstance().getString('bbb.screensharePublish.WebRTCUseJavaButton.label')}"
								visible="true"
								enabled="true"
								click="onFallbackButtonClicked()"/>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>

  </mx:states>

  <mx:VBox id="mainContainer" width="100%" height="100%"  paddingBottom="2" paddingLeft="2" paddingRight="2" paddingTop="2">
    <mx:HBox width="100%" height="90%" id="mainElement"/>
  </mx:VBox>

</mx:Box>
