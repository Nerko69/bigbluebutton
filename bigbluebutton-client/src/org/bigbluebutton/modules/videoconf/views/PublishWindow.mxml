<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
--> 

<pubVid:VideoWindowItf xmlns="org.bigbluebutton.modules.videoconf.business.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:pubVid="org.bigbluebutton.modules.videoconf.business.*"
	creationComplete="init()"
	width="{camWidth + 6}" height="{camHeight + 75}" 
	backgroundImage="{bbbLogo}" 
	xmlns:mate="http://mate.asfusion.com/"
	resize="onResize()"
	layout="absolute">
	
	<mx:Script>
		<![CDATA[
			import flexlib.mdi.events.MDIWindowEvent;
			
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.common.events.CloseWindowEvent;
			import org.bigbluebutton.main.views.MainCanvas;
			import org.bigbluebutton.modules.videoconf.events.OpenVideoWindowEvent;
			import org.bigbluebutton.modules.videoconf.events.CloseAllWindowsEvent;
			import org.bigbluebutton.modules.videoconf.events.StartBroadcastEvent;
			import org.bigbluebutton.modules.videoconf.events.StopBroadcastEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			[Bindable] public var camIcon:Class = images.control_play;
			[Bindable] public var bbbLogo:Class = images.bbb_logo;
			
			[Bindable] private var camWidth:Number = 320;
			[Bindable] private var camHeight:Number = 240;
			private var _userrole:String;
			public var quality:Number = 0;
			
			private function init():void{
				_videoHolder = new UIComponent();
				_videoHolder.width = camWidth;
				_videoHolder.height = camHeight;
				this.addChild(_videoHolder);

                this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');
				currentState = "dispVideoOptionsControlBar";
				checkIfMacCamera();
				if (isPresenter()) showResControls(true);
				if (Camera.names.length > 1) showVideoControls(true);
				if (!isPresenter() && Camera.names.length == 1) startPublishing();

				this.minWidth = _minWidth;
				this.minHeight = _minHeight;
				maximizeRestoreBtn.visible = false;
				this.resizable = false;
				
				loadPrefs();
			}
			
			private function loadPrefs():void{
				var sharedObject:SharedObject = SharedObject.getLocal("bbbUserProperties", "/");
				var webcam:String = sharedObject.data["webcam"] as String;
				for (var i:Number = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == webcam) cmbCameraSelector.selectedIndex = i;
				}
			}
			
			private function startPublishing():void{
				var camera:Camera = Camera.getCamera(cmbCameraSelector.selectedIndex.toString());
				if (camera == null) return;
				
				var res:Array = cmbResolution.selectedLabel.split( "x" );
				camWidth = originalWidth = Number(res[0]);
				camHeight = originalHeight = Number(res[1]);
				
				camera.setKeyFrameInterval(5);
				camera.setMode(camWidth,camHeight,15);
				camera.setQuality(0,quality);
				if (camera.width != camWidth || camera.height != camHeight) {
					LogUtil.debug("Resolution " + camWidth + "x" + camHeight
						+ " is not supported, using " + camera.width + "x" + camera.height + " instead");
					camWidth = originalWidth = camera.width;
					camHeight = originalHeight = camera.height;
				}
				setAspectRatio(camWidth, camHeight);
				setStreamName();
				
				_video = new Video(camWidth, camHeight);
				//Next two lines may seem redundant but they're not. Do not delete.
				_video.width = camWidth;
				_video.height = camHeight;
				onResize();
				_video.attachCamera(camera);
				_videoHolder.addChild(_video);
				
				var e:StartBroadcastEvent = new StartBroadcastEvent();
				e.stream = this.streamName;
				e.camera = camera;
				dispatchEvent(e);
				
				showVideoControls(false);
				showResControls(false);

				maximizeRestoreBtn.visible = true;
				this.resizable = true;

                addEventListener(MDIWindowEvent.RESIZE_START, onResizeStart);
                addEventListener(MDIWindowEvent.RESIZE_END, onResizeEnd);
				addEventListener(MDIWindowEvent.DRAG_START, onDragStart);
				addEventListener(MDIWindowEvent.DRAG, onDrag);
				addEventListener(MDIWindowEvent.DRAG_END, onDragEnd);
				addEventListener(MouseEvent.MOUSE_OVER, showButtons);
				addEventListener(MouseEvent.MOUSE_OUT, hideButtons);
				addEventListener(MouseEvent.DOUBLE_CLICK, onDoubleClick);
				
				createButtons();

				// this event will dock the window, if it's enabled
				var openVideoEvent:OpenVideoWindowEvent = new OpenVideoWindowEvent();
				openVideoEvent.window = this;
				dispatchEvent(openVideoEvent);			
			}
			
			override public function close(event:MouseEvent=null):void{
				stopPublishing();

				super.close(event);
			}
			
			private function stopPublishing():void{
				if (_video != null) {
					_video.attachCamera(null);
					_video.clear();
					_video = null;
				}
				var e:StopBroadcastEvent = new StopBroadcastEvent()
				e.stream = streamName;
				dispatchEvent(e);
			}
			
			private function setStreamName():void{
				this.streamName = camWidth + "x" + camHeight + userId;
			}
			
			public function set userrole(role:String):void{
				this._userrole = role;
			}
			
			private function isPresenter():Boolean{
				if (this._userrole == "MODERATOR" || this._userrole == "PRESENTER") return true;
				else return false;
			}
			
			private function showVideoControls(show:Boolean):void{
				if (show){
					currentState = "dispVideoOptionsControlBar"
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = true;
				} else{					
					videoOptionsBar.visible = true;
					btnStartPublish.visible = true;
					cmbCameraSelector.visible = false;
					currentState = "dispVideo";
				}
			}
			
			private function showResControls(show:Boolean):void{
				if (show) cmbResolution.visible = true;
				else cmbResolution.visible = false;
			}
			
			private function closeWindow(e:CloseAllWindowsEvent):void{
				closeThisWindow();
			}
			
			private function closeThisWindow():void {
				this.close();
			}
			
			private function checkIfMacCamera():void{
				for (var i:int = 0; i<Camera.names.length; i++){
					if (Camera.names[i] == "USB Video Class Video") {
						/**
						 * Set as default for Macs
						 */
						cmbCameraSelector.selectedIndex = i;
					}
				}
			}
			
            override protected function resourcesChanged():void{
                // when the user starts to publish, the window title is your name + (you)                   
                if (currentState == "dispVideoOptionsControlBar")
                    this.title = ResourceUtil.getInstance().getString('bbb.publishVideo.title');
            }			

		]]>
	</mx:Script>

	<pubVid:states>
	    <!--http://stackoverflow.com/questions/369120/why-does-mxstates-have-trouble-being-resolved-to-a-component-implementation-->
	    <mx:State name="dispVideo"/>
        <!--mx:State name="dispQuitControlBar">   
            <mx:AddChild>
            	<mx:ControlBar id="quitOptionsBar">
            		<mx:Spacer width="50%"/>
					<mx:Button id="btnQuitPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.video.publish.close.tooltip')}" label="{ResourceUtil.getInstance().getString('bbb.video.publish.close.label')}" visible="true" click="closeThisWindow()" />
					<mx:Spacer width="50%"/>
				</mx:ControlBar>	
            </mx:AddChild>
        </mx:State-->		
        <mx:State name="dispVideoOptionsControlBar">   
            <mx:AddChild>
				<mx:ControlBar id="videoOptionsBar">
					<mx:Button id="btnStartPublish" toolTip="{ResourceUtil.getInstance().getString('bbb.publishVideo.startPublishBtn.toolTip')}" icon="{camIcon}" click="startPublishing()" />
					<mx:ComboBox id="cmbCameraSelector" dataProvider="{Camera.names}" width="150" visible="false" />
					<mx:ComboBox id="cmbResolution" dataProvider="{resolutions}" width="20%" visible="false" />
				</mx:ControlBar>
            </mx:AddChild>
        </mx:State>	
	</pubVid:states>
		
	<mate:Listener type="{CloseAllWindowsEvent.CLOSE_ALL_WINDOWS}" method="closeWindow" />
</pubVid:VideoWindowItf>
