<?xml version="1.0" encoding="utf-8"?>

<!--
  BigBlueButton open source conferencing system - http://www.bigbluebutton.org
  
  Copyright (c) 2010 BigBlueButton Inc. and by respective authors (see below).
  
  BigBlueButton is free software; you can redistribute it and/or modify it under the 
  terms of the GNU Lesser General Public License as published by the Free Software 
  Foundation; either version 2.1 of the License, or (at your option) any later 
  version. 
  
  BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY 
  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
  PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public License along 
  with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
 
  $Id: $
-->

<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" 
		 horizontalScrollPolicy="off" creationComplete="onCreationComplete()"
		 horizontalAlign="left"  xmlns:mate="http://mate.asfusion.com/">

	<mate:Listener type="SYNC_MIC_GAIN_EVENT" method="syncMicGain" />

	<mx:Script>
		<![CDATA[
			import org.bigbluebutton.common.LogUtil;
			import org.bigbluebutton.main.events.BBBEvent;
			import flash.events.MouseEvent;			
			import mx.controls.Image;
			import mx.controls.Label;
			import mx.controls.TileList;			
			import org.bigbluebutton.common.Images;
			import org.bigbluebutton.modules.listeners.events.ListenersCommand;
			import org.bigbluebutton.util.i18n.ResourceUtil; 
			import org.bigbluebutton.common.events.AddUIComponentToMainCanvas;
			import org.bigbluebutton.modules.listeners.views.ListenersWindow;

			private var images:Images = new Images();
			
			[Bindable] private var lockedIcon:Class = images.locked;
			[Bindable] private var unlockedIcon:Class = images.unlocked;
			[Bindable] private var muteIcon:Class = images.sound_mute;
			[Bindable] private var unmuteIcon:Class = images.sound_none;
			[Bindable] private var talkIcon:Object = images.sound;   		
			[Bindable] private var ejectIcon:Class = images.delete_icon;
			[Bindable] private var forwardIcon:Class = images.forward;
			[Bindable] private var statusTooltip : String = "";
			[Bindable] private var ejectTooltip : String = ResourceUtil.getInstance().getString('bbb.listeners.ejectTooltip');
			[Bindable] private var moderator:Boolean = false;
			[Bindable] public var parentWindow:ListenersWindow= null;
			[Bindable] public var gainSlider:GainSlider = null;
			public function onRollOver():void{
				if (moderator) kickUserBtn.visible = true;
				if(gainSlider != null)
					gainSlider.positionToolbar(parentWindow);
			}

			public function showVolumeControl():void {
				if(gainSlider == null) {
					var addUIEvent:AddUIComponentToMainCanvas = new AddUIComponentToMainCanvas(AddUIComponentToMainCanvas.ADD_COMPONENT);
					gainSlider = new GainSlider();
					gainSlider.visible = true;
					addUIEvent.component = gainSlider;
					dispatchEvent(addUIEvent);
					gainSlider.positionToolbar(parentWindow);
					gainSlider.labelName.text = data.callerName;
					gainSlider.userid = data.userid;
					gainSlider.sld.value = data.gain;
				}
				else {
					gainSlider.visible = true;
					gainSlider.positionToolbar(parentWindow);
				}
			}
			
			public function hideVolumeControl():void {
				if (gainSlider != null) 
					gainSlider.visible = false;
			}

			public function syncMicGain(event:BBBEvent):void {
				if (gainSlider != null && (event.payload.userid == gainSlider.userid)) {
					gainSlider.sld.value = event.payload.gain;
				}
			}
			
			public function onRollOut():void{
				if (moderator) kickUserBtn.visible = false;
			}

			public function setParent(par:ListenersWindow):void {
				this.parentWindow = par;
			}
			
			public function muteUser():void {
				var e:ListenersCommand = new ListenersCommand(ListenersCommand.MUTE_USER);
				e.userid = data.userid;
				e.mute = !data.muted; // toggle muted
				dispatchEvent(e);
			}	
			
			public function lockMuteUser():void {
				var e:ListenersCommand = new ListenersCommand(ListenersCommand.LOCK_MUTE_USER);
				e.userid = data.userid;
				e.lock = !data.locked;
				dispatchEvent(e);
			}
			
			private function showMuteButton():void {
				if (data.moderator) {
					muteBtn.visible = true;
					muteCB.visible = true;      			
				} else {
					muteBtn.visible = false;
					muteBtn.visible = false;
					muteCB.visible = false;
				}       			
			}
			
			private function hideMuteButton():void {
				muteBtn.visible = false;
				muteCB.visible = false;
			}
			
			private function onCreationComplete():void {
				if ((data != null) && data.moderator) muteCB.visible = true;		
				else muteCB.visible = false;
				
				if (data != null) this.moderator = data.moderator;
			}
			
			private function handleEjectButtonClick():void {
				//proxy.ejectUser(listenersList.selectedItem.userid);
				//var ejectCommand:ListenersCommand = new ListenersCommand(ListenersCommand.EJECT_USER);
				//ejectCommand.userid = data.userid;
				//dispatchEvent(ejectCommand);
			}
			private function handleVolumeButtonClick():void {
				if(gainSlider == null || gainSlider.visible == false)
					showVolumeControl();
				else
					hideVolumeControl();
			}
			

			
			
			
		]]>
	</mx:Script>
		
	<mx:Button id="muteBtn" width="20" height="20" visible="true" enabled="{data.moderator}" 
			   toolTip="{data.moderator ? ResourceUtil.getInstance().getString('bbb.listenerItem.muteUnmute.toolTip') : ''}"
			   icon="{data.muted ? muteIcon : unmuteIcon}" click="muteUser()"/>
	<mx:Label id="nameLabel" textAlign="left" text="{data.callerName}" minWidth="120"
			  toolTip="{ResourceUtil.getInstance().getString('bbb.listenerItem.nameLbl.toolTip')}"/>
	<mx:Button id="muteCB" width="20" height="20" visible="true" enabled="{data.moderator}" 
			   toolTip="{ResourceUtil.getInstance().getString('bbb.listenerItem.lockImg.toolTip')}"
			   icon="{data.locked ? lockedIcon : unlockedIcon}" click="lockMuteUser()"/>
	<mx:Button id="volumeControl" icon="{ejectIcon}" width="20" height="20" enabled="{data.moderator}"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.ejectTooltip')}"
			   click="handleVolumeButtonClick()" />
	<mx:Image id="talkImg" source="{talkIcon}" visible="{data.talking}" 
			  toolTip="{ResourceUtil.getInstance().getString('bbb.listenerItem.talkImg.toolTip')}"/>
	<mx:Button id="kickUserBtn" icon="{ejectIcon}" width="20" height="20" visible="false"
			   toolTip="{ResourceUtil.getInstance().getString('bbb.listeners.ejectTooltip')}"
			   click="handleEjectButtonClick()"/>
	
</mx:HBox>
