<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-2.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd">

	<bean id="placeholderConfig" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	    <property name="locations">
	    	<list>
	    	 	<value>/WEB-INF/red5-web.properties</value>
	    	 	<value>/WEB-INF/bigbluebutton-sip.properties</value>
	    	</list>
	    </property>
	</bean>
	
	
	<bean id="web.context" class="org.red5.server.Context"
		autowire="byType" />

	<bean id="web.scope" class="org.red5.server.WebScope"
		 init-method="register">
		<property name="server" ref="red5.server" />
		<property name="parent" ref="global.scope" />
		<property name="context" ref="web.context" />
		<property name="handler" ref="web.handler" />
		<property name="contextPath" value="${webapp.contextPath}" />
		<property name="virtualHosts" value="${webapp.virtualHosts}" />
	</bean>

	<bean id="web.handler" class="org.bigbluebutton.voiceconf.red5.Application">
		<property name="sipServerHost" value="${sip.server.host}" />
		<property name="sipPort" value="${sip.server.port}" />
		<property name="username" value="${sip.server.username}" />
		<property name="password" value="${sip.server.password}" />
		<property name="startAudioPort" value="${startAudioPort}" />
		<property name="stopAudioPort" value="${stopAudioPort}" />
		<property name="sipPeerManager" ref="sipPeerManager"/>
		<property name="clientConnectionManager" ref="clientConnectionManager"/>
	</bean>

    <bean id="voiceconf.service" class="org.bigbluebutton.voiceconf.red5.Service">
        <property name="sipPeerManager" ref="sipPeerManager"/>
    </bean>
    	
	<bean id="sipPeerManager" class="org.bigbluebutton.voiceconf.sip.SipPeerManager">
		<property name="sipStackDebugLevel" value="${sipStackDebugLevel}"/>
	</bean>
	
	<bean id="clientConnectionManager" class="org.bigbluebutton.voiceconf.red5.ClientConnectionManager">
		<property name="messagingService" ref="messagingService"/>
	</bean>

	<!-- MESSAGING -->
	
    <bean id="messagingService" class="org.bigbluebutton.voiceconf.red5.messaging.RedisMessagingService">
    	<property name="redisPool" ref="redisPool"/>
  	</bean>
    
    <bean id="config" class="org.bigbluebutton.voiceconf.red5.messaging.GenericObjectPoolConfigWrapper">
	  <!-- Action to take when trying to acquire a connection and all connections are taken -->
	  <property name="whenExhaustedAction">
	    <!-- Fail-fast behaviour, we don't like to keep the kids waiting -->
	    <util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_FAIL" />
	    <!-- Default behaviour, block the caller until a resource becomes available -->
	    <!--<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK" />-->
	  </property>
	  <!-- Maximum active connections to Redis instance -->
	  <property name="maxActive" value="12" />
	  <!-- Number of connections to Redis that just sit there and do nothing -->
	  <property name="maxIdle" value="6" />
	  <!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
	  <property name="minIdle" value="1" />
	  <!-- Tests whether connection is dead when connection retrieval method is called -->
	  <property name="testOnBorrow" value="true" />
	  <!-- Tests whether connection is dead when returning a connection to the pool -->
	  <property name="testOnReturn" value="true" />
	  <!-- Tests whether connections are dead during idle periods -->
	  <property name="testWhileIdle" value="true" />
	  <!-- Maximum number of connections to test in each idle check -->
	  <property name="numTestsPerEvictionRun" value="12" />
	  <!-- Idle connection checking period -->
	  <property name="timeBetweenEvictionRunsMillis" value="60000" />
	  <!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
	  <property name="maxWait" value="5000" />
	</bean>
    
    <bean id="redisPool" class="redis.clients.jedis.JedisPool">
    	<constructor-arg index="0">
    		<bean factory-bean="config" factory-method="getConfig" />
  		</constructor-arg>
        <constructor-arg index="1" value="${redis.host}"/>
        <constructor-arg index="2" value="${redis.port}"/>
    </bean>
	
	<!-- END MESSAGING -->

      
</beans>
