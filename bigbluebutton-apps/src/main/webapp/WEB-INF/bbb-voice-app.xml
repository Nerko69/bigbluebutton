<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	    http://www.springframework.org/schema/util
	    http://www.springframework.org/schema/util/spring-util-2.0.xsd">
	
	<bean id="voiceHandler" class="org.bigbluebutton.conference.service.voice.VoiceHandler">
		<property name="conferenceService" ref="conferenceService"/>
		<property name="clientNotifier" ref="clientNotifier"/>
	</bean>
		
	<bean id="clientNotifier" class="org.bigbluebutton.webconference.red5.voice.ClientManager"/>
		
	<bean id="conferenceService" class="org.bigbluebutton.webconference.voice.ConferenceService">
		<property name="conferenceServiceProvider" ref="conferenceServiceProvider"/>
		<property name="roomManager" ref="roomManager"/>
		<property name="clientManager" ref="clientNotifier"/>
	</bean>

	<bean id="roomManager" class="org.bigbluebutton.webconference.voice.internal.RoomManager">
		<property name="messagingService" ref="messagingService"></property>
		<property name="voiceEventRecorder" ref="voiceEventRecorder"/>
	</bean>

	<bean id="voiceEventRecorder" class="org.bigbluebutton.webconference.voice.VoiceEventRecorder">
		<property name="recorderApplication" ref="recorderApplication"/>
	</bean>
				
	<bean id="voice.service" class="org.bigbluebutton.conference.service.voice.VoiceService">
		<property name="conferenceService" ref="conferenceService"/>
	</bean>

	<bean id="messagingService" class="org.bigbluebutton.conference.service.messaging.RedisMessagingService">
		<property name="redisPool" ref="redisPool"/>
	</bean>

    <bean id="config" class="org.bigbluebutton.conference.service.recorder.GenericObjectPoolConfigWrapper">
	  <!-- Action to take when trying to acquire a connection and all connections are taken -->
	  <property name="whenExhaustedAction">
	    <!-- Fail-fast behaviour, we don't like to keep the kids waiting -->
	    <util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_FAIL" />
	    <!-- Default behaviour, block the caller until a resource becomes available -->
	    <!--<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK" />-->
	  </property>
	  <!-- Maximum active connections to Redis instance -->
	  <property name="maxActive" value="12" />
	  <!-- Number of connections to Redis that just sit there and do nothing -->
	  <property name="maxIdle" value="6" />
	  <!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
	  <property name="minIdle" value="1" />
	  <!-- Tests whether connection is dead when connection retrieval method is called -->
	  <property name="testOnBorrow" value="true" />
	  <!-- Tests whether connection is dead when returning a connection to the pool -->
	  <property name="testOnReturn" value="true" />
	  <!-- Tests whether connections are dead during idle periods -->
	  <property name="testWhileIdle" value="true" />
	  <!-- Maximum number of connections to test in each idle check -->
	  <property name="numTestsPerEvictionRun" value="12" />
	  <!-- Idle connection checking period -->
	  <property name="timeBetweenEvictionRunsMillis" value="60000" />
	  <!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
	  <property name="maxWait" value="5000" />
	</bean>

	<bean id="redisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0">
			<bean factory-bean="config" factory-method="getConfig" />
		</constructor-arg>
		<constructor-arg index="1" value="${redis.host}"/>
		<constructor-arg index="2" value="${redis.port}"/>
	</bean>

</beans>
