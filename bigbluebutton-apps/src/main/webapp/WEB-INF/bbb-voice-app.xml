<?xml version="1.0" encoding="UTF-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<beans:beans 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util-2.0.xsd">
	
	<beans:bean id="voiceHandler" class="org.bigbluebutton.conference.service.voice.VoiceHandler">
		<beans:property name="conferenceService" ref="conferenceService"/>
		<beans:property name="clientNotifier" ref="clientNotifier"/>
	</beans:bean>
		
	<beans:bean id="clientNotifier" class="org.bigbluebutton.webconference.red5.voice.ClientManager"/>
		
	<beans:bean id="conferenceService" class="org.bigbluebutton.webconference.voice.ConferenceService">
		<beans:property name="conferenceServiceProvider" ref="conferenceServiceProvider"/>
		<beans:property name="roomManager" ref="roomManager"/>
		<beans:property name="clientManager" ref="clientNotifier"/>
	</beans:bean>

	<beans:bean id="roomManager" class="org.bigbluebutton.webconference.voice.internal.RoomManager">
		<beans:property name="messagingService" ref="messagingService"/>
		<beans:property name="voiceEventRecorder" ref="voiceEventRecorder"/>
	</beans:bean>

	<beans:bean id="voiceEventRecorder" class="org.bigbluebutton.webconference.voice.VoiceEventRecorder">
		<beans:property name="recorderApplication" ref="recorderApplication"/>
	</beans:bean>
				
	<beans:bean id="voice.service" class="org.bigbluebutton.conference.service.voice.VoiceService">
		<beans:property name="conferenceService" ref="conferenceService"/>
	</beans:bean>

	<beans:bean id="messagingService" class="org.bigbluebutton.conference.service.messaging.RedisMessagingService">
		<beans:property name="redisPool" ref="redisPool"/>
	</beans:bean>

	<beans:bean id="config" class="org.bigbluebutton.conference.service.recorder.GenericObjectPoolConfigWrapper">
		<!-- Action to take when trying to acquire a connection and all connections are taken -->
		<beans:property name="whenExhaustedAction">
		<!-- Fail-fast behaviour, we don't like to keep the kids waiting -->
		<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_FAIL" />
		<!-- Default behaviour, block the caller until a resource becomes available -->
		<!--<util:constant static-field="org.apache.commons.pool.impl.GenericObjectPool.WHEN_EXHAUSTED_BLOCK" />-->
		</beans:property>
		<!-- Maximum active connections to Redis instance -->
		<beans:property name="maxActive" value="12" />
		<!-- Number of connections to Redis that just sit there and do nothing -->
		<beans:property name="maxIdle" value="6" />
		<!-- Minimum number of idle connections to Redis - these can be seen as always open and ready to serve -->
		<beans:property name="minIdle" value="1" />
		<!-- Tests whether connection is dead when connection retrieval method is called -->
		<beans:property name="testOnBorrow" value="true" />
		<!-- Tests whether connection is dead when returning a connection to the pool -->
		<beans:property name="testOnReturn" value="true" />
		<!-- Tests whether connections are dead during idle periods -->
		<beans:property name="testWhileIdle" value="true" />
		<!-- Maximum number of connections to test in each idle check -->
		<beans:property name="numTestsPerEvictionRun" value="12" />
		<!-- Idle connection checking period -->
		<beans:property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- Maximum time, in milliseconds, to wait for a resource when exausted action is set to WHEN_EXAUSTED_BLOCK -->
		<beans:property name="maxWait" value="5000" />
	</beans:bean>

	<beans:bean id="redisPool" class="redis.clients.jedis.JedisPool">
		<beans:constructor-arg index="0">
			<beans:bean factory-bean="config" factory-method="getConfig" />
		</beans:constructor-arg>
		<beans:constructor-arg index="1" value="${redis.host}"/>
		<beans:constructor-arg index="2" value="${redis.port}"/>
	</beans:bean>

</beans:beans>
